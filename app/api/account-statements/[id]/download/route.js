import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '../../../lib/auth';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(req, { params }) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id } = params;

    // Get the account statement
    const statement = await prisma.accountStatement.findUnique({
      where: { id },
      include: { 
        account: { select: { name: true, type: true } },
        user: { select: { name: true, email: true } }
      }
    });

    if (!statement) {
      return NextResponse.json({ error: 'Account statement not found' }, { status: 404 });
    }

    if (statement.status !== 'COMPLETED') {
      return NextResponse.json({ error: 'Statement not completed yet' }, { status: 400 });
    }

    // In production, you would read the actual PDF file from the file system
    // For now, we'll generate a simple response
    const content = `
ACCOUNT STATEMENT
=================

Account: ${statement.account.name} (${statement.account.type})
Period: ${statement.startDate.toLocaleDateString()} - ${statement.endDate.toLocaleDateString()}
Generated: ${statement.createdAt.toLocaleString()}
Generated by: ${statement.user.name}

This is a sample statement. In production, this would be a properly formatted PDF.
    `;
    
    return new NextResponse(content, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="account-statement-${id}.pdf"`,
      },
    });
  } catch (error) {
    console.error('Download statement error:', error);
    return NextResponse.json({ error: 'Failed to download statement' }, { status: 500 });
  }
}
